# QuantConsole .gitignore
# 综合了 Node.js、Rust、Docker 和项目特定的忽略规则

#================================================
# Node.js / Frontend
#================================================

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files (keep examples)
.env
.env.test
.env.local
.env.production
!.env.example
!.env.*.example

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# Vite
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

#================================================
# Rust / Backend
#================================================

# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# Generated by cargo mutants
**/mutants.out*/

#================================================
# Docker
#================================================

# Docker volumes and data
**/data/
**/logs/

#================================================
# Database
#================================================

# MySQL
*.sql.backup
*.sql.bak

# Database dumps
*.dump
*.db

#================================================
# Operating System
#================================================

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

#================================================
# IDEs and Editors
#================================================

# VSCode
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

# JetBrains
.idea/
*.swp
*.swo

# Vim
*~
*.swp
*.swo

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# Sublime Text
*.tmlanguage.cache
*.tmPreferences.cache
*.stTheme.cache
*.sublime-workspace
*.sublime-project

#================================================
# Security and Keys
#================================================

# Private keys and certificates
*.key
*.pem
*.p12
*.pfx
*.crt
*.cer
*.csr

# JWT secrets (except examples)
jwt-secret.txt
secrets.json
!secrets.example.json

#================================================
# Build and Deployment
#================================================

# Build outputs
build/
dist/
out/

# Deployment scripts with sensitive data
deploy.local.*
deploy.prod.*
!deploy.example.*

# Backup files
*.backup
*.bak
*.tmp

#================================================
# Project Specific
#================================================

# Rust installation files
rustup-init.exe
install-rust.bat

# Local configuration overrides
config.local.*
.env.local
.env.*.local

# Upload directories
uploads/
temp/
tmp/

# Generated documentation
docs/build/

# Test outputs
coverage/
test-results/
*.test.log

#================================================
# Temporary Files
#================================================

# General temporary files
*.tmp
*.temp
*~

# Log files
*.log
logs/

# Cache directories
.cache/
cache/

# Package manager lock files (comment out if you want to commit them)
# package-lock.json
# yarn.lock
# Cargo.lock

#================================================
# Development Tools
#================================================

# Benchmarking
benchmark_results/

# Profiling
*.prof

# Debug files
debug.log
*.debug

# Hot reload files
.hot-reload/
